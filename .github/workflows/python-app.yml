# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: "3.8"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest

    - name: Build, Push and Release a Docker container to Heroku. # Your custom step name
      uses: gonuit/heroku-docker-deploy@v1.3.3 # GitHub action name (leave it as it is).
      with:
        # Below you must provide variables for your Heroku app.
  
        # The email address associated with your Heroku account.
        # If you don't want to use repository secrets (which is recommended) you can do:
        # email: my.email@example.com
        email: ${{ secrets.HEROKU_EMAIL }}
        
        # Heroku API key associated with provided user's email.
        # Api Key is available under your Heroku account settings.
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        
        # Name of the heroku application to which the build is to be sent.
        heroku_app_name: movi-recom-dev
  
        # (Optional, default: "./")
        # Dockerfile directory.
        # For example, if you have a Dockerfile in the root of your project, leave it as follows:
        dockerfile_directory: ./
  
        # (Optional, default: "Dockerfile")
        # Dockerfile name.
        dockerfile_name: Dockerfile
  
        # (Optional, default: "")
        # Additional options of docker build command.
        #docker_options: "--no-cache"
        #dockerfile_path: '.' # set the path to the folder where the Dockerfile is located
        process_type: 'web' # Specify the process type you want to build and release
  
        # (Optional, default: "web")
        # Select the process type for which you want the docker container to be uploaded.
        # By default, this argument is set to "web".
        # For more information l
